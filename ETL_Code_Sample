from abc import ABC, abstractmethod
from Objects.Universal.database import Universal
import re
import pandas as pd
import openpyxl as xl
from openpyxl.workbook.workbook import Workbook, Worksheet


# ----------------------------------------------------------------------------------------------------------------------
# Base Classes
# ----------------------------------------------------------------------------------------------------------------------
class FromFile(ABC):

    def __init__(self,
                 file_path: str):
        self.path = file_path

    @property
    @abstractmethod
    def columns(self):
        return dict()

    @abstractmethod
    def get_dataframe(self):
        pass


class FromWorksheet(FromFile, ABC):

    def __init__(self,
                 file_path: str):
        super().__init__(file_path=file_path)
        self._workbook: Workbook = None
        self._worksheet: Worksheet = None
        self._activate_worksheet()

    def _activate_worksheet(self):
        self._workbook = xl.load_workbook(filename=self.path)
        self._worksheet = self._workbook.worksheets[0]

    @property
    @abstractmethod
    def header_row(self):
        pass

    @property
    @abstractmethod
    def last_column(self):
        pass

    def get_columns_from_worksheet(self):
        columns = list(next(self._worksheet.iter_rows(min_row=self.header_row,
                                                      max_col=self.last_column,
                                                      values_only=True)))
        columns = [self.columns.get(column) for column in columns]
        return columns

    def get_dataframe(self):
        return pd.DataFrame(data=list(self._worksheet.iter_rows(min_row=self.header_row + 1,
                                                                max_col=self.last_column,
                                                                values_only=True)),
                            columns=self.get_columns_from_worksheet())


class FromCSV(FromFile, ABC):

    @property
    def columns(self):
        return super().columns

    def get_dataframe(self):
        return pd.read_csv(self.path)


# ----------------------------------------------------------------------------------------------------------------------
# File Objects
# ----------------------------------------------------------------------------------------------------------------------
class StateFIPS(FromWorksheet):

    def __init__(self):
        super().__init__(file_path=r'Objects/Universal/Geography_Tables/_Files/state-geocodes-v2016.xlsx')

    @property
    def columns(self):
        return {'Region': 'Region_ID',
                'Division': 'Division_ID',
                'State (FIPS)': 'State_Code_FIPS',
                'Name': 'Name'}

    @property
    def header_row(self):
        return 6

    @property
    def last_column(self):
        return 4


class AllOtherFIPS(FromWorksheet):

    def __init__(self):
        super().__init__(file_path=r'Objects/Universal/Geography_Tables/_Files/all-geocodes-v2016.xlsx')

    @property
    def columns(self):
        return {'Summary Level': 'Summary_Level',
                'State Code (FIPS)': 'State_Code_FIPS',
                'County Code (FIPS)': 'County_Code_FIPS',
                'County Subdivision Code (FIPS)': 'County_Subdivision_Code_FIPS',
                'Place Code (FIPS)': 'Place_Code_FIPS',
                'Consolidtated City Code (FIPS)': 'Consolidated_City_Code_FIPS',
                'Area Name (including legal/statistical area description)': 'Area_Name'}

    @property
    def header_row(self):
        return 5

    @property
    def last_column(self):
        return 7


class StateNamesAndAbbreviations(FromCSV):

    def __init__(self):
        super().__init__(file_path=r'Objects/Universal/Geography_Tables/_Files/states.csv')


# ----------------------------------------------------------------------------------------------------------------------
# Upload-able Datasets
# ----------------------------------------------------------------------------------------------------------------------
class FIPSDataset:

    def get_dataset(self):
        df = StateFIPS().get_dataframe()
        df = df.merge(StateNamesAndAbbreviations().get_dataframe(),
                      how='left',
                      left_on='Name',
                      right_on='State')
        df = df.merge(AllOtherFIPS().get_dataframe(),
                      how='left',
                      left_on='State_Code_FIPS',
                      right_on='State_Code_FIPS')

        df['Area_Type'] = df['Area_Name'].apply(func=self.get_area_type)
        df['Area_Name'] = df['Area_Name'].apply(func=self.clean_area_name)
        return df

    @staticmethod
    def get_area_type(value: str):
        try:
            value = re.search(pattern=r'(( [a-z]+)+?| Census Area| UT| CDP)$', string=value).group()
            value = value. \
                replace('CDP', 'Census Designated Place'). \
                replace('UT', 'Unorganized Territory')
            return value.title()
        except AttributeError:
            return pd.np.nan

    @staticmethod
    def clean_area_name(value: str):
        return re.sub(pattern=r'(( [a-z]+)+?| Census Area| UT| CDP)$', repl='', string=value).strip()

    def upload_dataset(self):
        db = Universal()
        db.execute_statement("DELETE FROM Stage.Geography_AreaType;")
        df = self.get_dataset()
        print(df.columns)
        for index, row in df.iterrows():
            db.execute_statement(statement='INSERT INTO {schema}.{table} () VALUES ();'.format(schema='Geography',
                                                                                               table='FIPS_Data'))


def main():
    FIPSDataset().upload_dataset()


if __name__ == '__main__':
    main()
